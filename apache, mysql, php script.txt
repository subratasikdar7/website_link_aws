#!/bin/bash

# Check if script is being run by root
if [[ $EUID -ne 0 ]]; then
   printf "This script must be run as root!\n"
   exit 1
fi

DIVIDER="\n***************************************\n\n"

# Welcome and instructions
printf $DIVIDER
printf "LAMP server setup on Ubuntu\n"
printf $DIVIDER

# Prompt to continue
while true; do
	read -p "Continue [Y/N]? " cnt1
	case $cnt1 in
		[Yy]* ) break;;
		[Nn]* ) exit;;
		* ) printf "Please answer Y or N\n";;
	esac
done

# Set the hostname
printf $DIVIDER
printf "HOSTNAME\n"
printf "Pick a hostname that identify this server.\nRecommended: use the main domain, e.g. example.com\n"
while true; do
	read -p "Hostname: " host
	case $host in
		"" ) printf "Hostname may not be left blank\n";;
		* ) break;;
	esac
done
echo "$host" > /etc/hostname
hostname -F /etc/hostname
printf "127.0.0.1       $host\n::1             $host\n" >> /etc/hosts;

############################################################

############################################################################
# Install and update software
printf $DIVIDER
printf "INSTALL AND UPDATE SOFTWARE\n"
printf "Now the script will update Ubuntu and install all the necessary software.\n"
printf " * You will be prompted to enter the password for the MySQL root user\n"
read -p "Please ENTER to continue "
apt-get -y update
fallocate -l 4G /swapfile
chmod 600 /swapfile
mkswap /swapfile
swapon /swapfile
echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
sudo apt update
sudo apt install apache2
sudo apt-get update
sudo apt -y install software-properties-common
sudo add-apt-repository ppa:ondrej/php
sudo apt-get update
sudo apt -y install php7.4
php -v
sudo apt-get install -y php7.4-cli php7.4-json php7.4-common php7.4-mysql php7.4-zip php7.4-gd php7.4-mbstring php7.4-curl php7.4-xml php7.4-bcmath
sudo apt install composer -y
sudo apt install mysql-server -y
sudo apt install php7.4-mbstring php7.4-zip php7.4-gd php7.4-curl php7.4-json -y
sudo apt install php7.4-mysql php7.4-cli php7.4-cgi php7.4-gd -y

sudo systemctl restart apache2
sudo service apache2 restart
sudo service apache2 enable

ports="listen 80\n\tlisten 8080\n\"
printf "$ports" > /etc/apache2/ports.conf


# APACHE configuration
printf $DIVIDER
printf "APACHE CONFIGURATION\n"
read -p "Please ENTER to continue "
# Virtual Hosts
printf $DIVIDER
printf "VIRTUAL HOSTS\n"
printf "The script will setup the base virtual hosts configuration. Using the main domain name it will:\n"
printf " * Setup configuration files for example.com (with alias www.example.com), and dev.example.com\n"
printf " * Setup the necessary directories\n"
while true; do
	read -p "Please enter the main domain (e.g. example.com): " domain
	case $domain in
		"" ) printf "Domain may not be left blank\n";;
		* ) break;;
	esac
done


chown -R www-data:www-data /var/www
sudo chmod 2775 /var/www/html
find /var/www/html -type d -exec sudo chmod 2755 {} \;
find /var/www/html -type f -exec sudo chmod 0644 {} \;

# Production
VIRTUALHOST="<VirtualHost *:80>\n\tServerAdmin contacts@unifiedinfotech.net\n\tServerName $domain\n\tDocumentRoot /var/www/html/ServerAlias www.$domain\n\t\n\tErrorLog ${APACHE_LOG_DIR}/$domain-error.log\n\tCustomLog ${APACHE_LOG_DIR}/$domain/access.log combined\n\t<Directory /var/www/html>\n\tOptions FollowSymLinks MultiViews \n\tAllowOverride All \n\tRedirectMatch 404 /\.gitignore \n\tRedirectMatch 404 /\.git \n\tRedirectMatch 404 /\.env\n\tRedirectMatch 404 /\.database.php  \n\tRedirectMatch 404 /\.services.php \n\tOrder allow,deny \n\tallow from all
\n\t</Directory>\n</VirtualHost>\n";
printf "$VIRTUALHOST" > /etc/apache2/sites-available/$domain.conf



###############################################################
# Enable sites
a2ensite $domain
a2ensite dev.$domain
service apache2 reload

# PHP
printf $DIVIDER
printf "PHP\n"
printf "The script will update PHP configuration\n"
read -p "Press ENTER to continue"

if [ ! -f /etc/php/7.4/apache2/php.ini.orig ]; then
	printf "Backing up PHP.ini configuration file to /etc/php/7.4/apache2/php.ini.orig\n"
	cp /etc/php/7.4/apache2/php.ini /etc/php/7.4/apache2/php.ini.orig
fi



FIND="^\s*post_max_size\s*=\s*.*"
REPLACE="post_max_size = 20M"
printf "php.ini: $REPLACE\n"
sed -i "0,/$FIND/s/$FIND/$REPLACE/m" /etc/php/7.4/apache2/php.ini

FIND="^\s*upload_max_filesize\s*=\s*.*"
REPLACE="upload_max_filesize = 20M"
printf "php.ini: $REPLACE\n"
sed -i "0,/$FIND/s/$FIND/$REPLACE/m" /etc/php/7.4/apache2/php.ini


# php7.4.conf correct settings
if [ ! -f /etc/apache2/mods-available/php7.4.conf.orig ]; then
	printf "Backing up php7.4.conf configuration file to /etc/apache2/mods-available/php7.4.conf.orig\n"
	cp /etc/apache2/mods-available/php7.4.conf /etc/apache2/mods-available/php7.4.conf.orig
fi

printf "Correct settings in php7.4.conf\n"
FIND="Order Deny,Allow"
REPLACE="# Order Deny,Allow"
sed -i "s/$FIND/$REPLACE/g" /etc/apache2/mods-available/php7.4.conf

FIND="Deny from all"
REPLACE="# Deny from all\n\tRequire all granted"
sed -i "s/$FIND/$REPLACE/g" /etc/apache2/mods-available/php7.4.conf

# Restart Apache
printf "Restarting Apache...\n"
service apache2 restart